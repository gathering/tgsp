// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                  String  @id @default(cuid())
  userId              String
  type                String
  provider            String
  providerAccountId   String
  refresh_token       String?  @db.Text
  access_token        String?  @db.Text
  expires_at          Int?
  refresh_expires_in  Int?
  token_type          String?
  scope               String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?
  role          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  credits       Int?      @default(4)

  accounts      Account[]
  sessions      Session[]
  virtualServers VirtualServer[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VirtualServerType {
  id            String   @id @default(cuid())
  type          String
  name          String
  orcTemplateId String
  cost          Int

  virtualServers VirtualServer[]
}

model VirtualServer {
  id                  String     @id @default(cuid())
  userId              String
  virtualServerTypeId String
  name                String
  orcId               String?
  createdAt           DateTime

  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  virtualServerType  VirtualServerType @relation(fields: [virtualServerTypeId], references: [id], onDelete: Cascade)
}